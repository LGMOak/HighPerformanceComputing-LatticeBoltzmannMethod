import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

def load_simulation_data():
    """Load simulation results from CSV files generated by C++ code"""
    try:
        # Load velocity field data
        velocity_data = pd.read_csv('Data Output/velocity_field.csv')

        # Load velocity profile data
        profile_data = pd.read_csv('Data Output/velocity_profile.csv')

        # Load simulation parameters
        params_data = pd.read_csv('Data Output/simulation_params.csv')
        params = dict(zip(params_data['parameter'], params_data['value']))

        return velocity_data, profile_data, params

    except FileNotFoundError as e:
        print(f"Error: Could not find CSV file. Make sure you've run the C++ simulation first.")
        print(f"Missing file: {e}")
        return None, None, None

def create_velocity_field_plot(velocity_data, params):
    """Create a velocity magnitude heatmap with streamlines (similar to the original Python plot)"""
    nx, ny = int(params['nx']), int(params['ny'])

    # Reshape data into 2D arrays
    ux = velocity_data['ux'].values.reshape((nx, ny))
    uy = velocity_data['uy'].values.reshape((nx, ny))
    velocity_mag = velocity_data['velocity_magnitude'].values.reshape((nx, ny))

    plt.figure(figsize=(10, 4))

    # Create a velocity magnitude plot (transposed to match the original orientation)
    plt.imshow(velocity_mag.T, cmap='jet', origin='lower', extent=[0, nx, 0, ny])
    plt.colorbar(label='Velocity Magnitude')

    title = f'LBM Channel Flow (Poiseuille) (t={int(params["num_timesteps"])}, τ={params["tau"]}, F_x={params["force_x"]:.0e})'
    plt.title(title)
    plt.xlabel('X-direction')
    plt.ylabel('Y-direction')

    # Add a streamplot for a flow direction (downsample for clarity)
    skip_x = max(1, nx // 20)
    skip_y = max(1, ny // 5)

    x_stream = np.arange(0, nx, skip_x)
    y_stream = np.arange(0, ny, skip_y)

    plt.streamplot(x_stream, y_stream,
                   ux[::skip_x, ::skip_y].T, uy[::skip_x, ::skip_y].T,
                   color='k', linewidth=0.5, density=1.0)

    plt.tight_layout()
    plt.savefig('velocity_field.png', dpi=300, bbox_inches='tight')
    plt.show()

def create_velocity_profile_plot(profile_data, params):
    """Create a velocity profile plot across the channel"""
    plt.figure(figsize=(6, 5))

    y_positions = profile_data['y'].values
    ux_profile = profile_data['ux'].values

    plt.plot(ux_profile, y_positions)

    mid_x = int(params['nx']) // 2
    plt.title(f'X-Velocity Profile at x={mid_x}')
    plt.xlabel('X-Velocity ($u_x$)')
    plt.ylabel('Y-position')
    plt.grid(True)

    plt.tight_layout()
    plt.savefig('velocity_profile.png', dpi=300, bbox_inches='tight')
    plt.show()

def print_simulation_info(params):
    """Print simulation information"""
    print("=== LBM Simulation Results ===")
    print(f"Grid size: {int(params['nx'])} × {int(params['ny'])}")
    print(f"Relaxation time (τ): {params['tau']}")
    print(f"Kinematic viscosity (ν): {params['nu']:.4f}")
    print(f"Body force (Fx): {params['force_x']:.0e}")
    print(f"Timesteps: {int(params['num_timesteps'])}")
    print("=" * 31)

def compare_with_analytical_poiseuille(profile_data, params):
    """Compare results with an analytical Poiseuille flow solution"""
    ny = int(params['ny'])
    force_x = params['force_x']
    nu = params['nu']

    # Analytical Poiseuille flow for channel flow with body force
    # u(y) = (F * H^2) / (8 * μ) * (1 - (2y/H - 1)^2)
    # where H = channel height, μ = dynamic viscosity = ν * ρ (assuming ρ = 1)

    H = ny - 1  # Effective channel height (between walls)
    y_analytical = np.linspace(0, ny-1, 100)

    # Normalized y coordinate: -1 at the bottom wall, +1 at the top wall
    y_norm = 2.0 * (y_analytical / H) - 1.0

    # Analytical velocity profile
    u_analytical = (force_x * H**2) / (8.0 * nu) * (1.0 - y_norm**2)

    plt.figure(figsize=(8, 6))

    # Plot simulation results
    y_sim = profile_data['y'].values
    ux_sim = profile_data['ux'].values
    plt.plot(ux_sim, y_sim, 'bo-', label='LBM Simulation', markersize=4)

    # Plot analytical solution
    plt.plot(u_analytical, y_analytical, 'r-', label='Analytical (Poiseuille)', linewidth=2)

    plt.title('Comparison: LBM vs Analytical Poiseuille Flow')
    plt.xlabel('X-Velocity ($u_x$)')
    plt.ylabel('Y-position')
    plt.legend()
    plt.grid(True, alpha=0.3)

    plt.tight_layout()
    plt.savefig('lbm_vs_analytical.png', dpi=300, bbox_inches='tight')
    plt.show()

    # Calculate error metrics
    y_interp = np.interp(y_sim, y_analytical, u_analytical)
    rmse = np.sqrt(np.mean((ux_sim - y_interp)**2))
    max_error = np.max(np.abs(ux_sim - y_interp))

    print(f"\n=== Validation Against Analytical Solution ===")
    print(f"RMSE: {rmse:.6f}")
    print(f"Max absolute error: {max_error:.6f}")
    print(f"Max analytical velocity: {np.max(u_analytical):.6f}")
    print(f"Relative RMSE: {rmse/np.max(u_analytical)*100:.2f}%")

def main():
    """Main function to generate all visualisations"""
    print("Loading LBM simulation data...")

    velocity_data, profile_data, params = load_simulation_data()

    if velocity_data is None:
        return

    print_simulation_info(params)

    print("\nGenerating velocity field visualization...")
    create_velocity_field_plot(velocity_data, params)

    print("Generating velocity profile plot...")
    create_velocity_profile_plot(profile_data, params)

    print("Comparing with analytical Poiseuille flow...")
    compare_with_analytical_poiseuille(profile_data, params)

    print("\nAll plots saved as PNG files!")
    print("Generated files:")
    print("  - velocity_field.png")
    print("  - velocity_profile.png")
    print("  - lbm_vs_analytical.png")

if __name__ == "__main__":
    main()